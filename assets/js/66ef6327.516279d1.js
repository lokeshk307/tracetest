"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[5442],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=l(a),g=r,m=h["".concat(p,".").concat(g)]||h[g]||d[g]||s;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[h]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},12732:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const s={id:"playwright",title:"Trace-Based End to End Testing with Playwright and Tracetest",description:"Tracetest can be integrated and used with Playwright. This guide shows running Tracetest tests from Playwright.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","playwright","end to end testing","end-to-end testing","integration testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,o={unversionedId:"tools-and-integrations/playwright",id:"tools-and-integrations/playwright",title:"Trace-Based End to End Testing with Playwright and Tracetest",description:"Tracetest can be integrated and used with Playwright. This guide shows running Tracetest tests from Playwright.",source:"@site/docs/tools-and-integrations/playwright.mdx",sourceDirName:"tools-and-integrations",slug:"/tools-and-integrations/playwright",permalink:"/tools-and-integrations/playwright",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/tools-and-integrations/playwright.mdx",tags:[],version:"current",frontMatter:{id:"playwright",title:"Trace-Based End to End Testing with Playwright and Tracetest",description:"Tracetest can be integrated and used with Playwright. This guide shows running Tracetest tests from Playwright.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","playwright","end to end testing","end-to-end testing","integration testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"examplesTutorialsSidebar",previous:{title:"Trace-Based End to End Testing with Cypress and Tracetest",permalink:"/tools-and-integrations/cypress"},next:{title:"Programmatically triggered trace-based tests using Tracetest and Typescript",permalink:"/tools-and-integrations/typescript"}},p={},l=[{value:"Why is this important?",id:"why-is-this-important",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"The <code>@tracetest/playwright</code> npm Package",id:"the-tracetestplaywright-npm-package",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Pokeshop Demo App",id:"pokeshop-demo-app",level:3},{value:"The Playwright Setup",id:"the-playwright-setup",level:2},{value:"The <code>home.spec.ts</code> Test Script",id:"the-homespects-test-script",level:3},{value:"Tracetest Library Setup",id:"tracetest-library-setup",level:3},{value:"Setting the Environment Variables",id:"setting-the-environment-variables",level:3},{value:"Starting the Pokeshop Demo App",id:"starting-the-pokeshop-demo-app",level:3},{value:"Running the Tests",id:"running-the-tests",level:3},{value:"Using the Playwright CLI",id:"using-the-playwright-cli",level:4},{value:"Using the Playwright UI",id:"using-the-playwright-ui",level:4}],c={toc:l},h="wrapper";function d(e){let{components:t,...s}=e;return(0,r.kt)(h,(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that permits you to test your distributed application. It allows you to use the trace data generated by your OpenTelemetry tools to check and assert if your application has the desired behavior defined by your test definitions."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://playwright.dev/"},"Playwright")," is an open-source automation framework developed by Microsoft that enables cross-browser automation for web applications. It provides a set of APIs and libraries for automating interactions with web browsers such as Chrome, Firefox, and Microsoft Edge."),(0,r.kt)("h2",{id:"why-is-this-important"},"Why is this important?"),(0,r.kt)("p",null,"The Tracetest integration for Playwright enables your current Playwright tests to easily capture a full distributed trace from your OpenTelemetry instrumented frontend and backend system. You can embed a Tracetest in this Playwright test, and allow trace-based testing assertions to be applied across this entire flow, enabling true end-to-end tests across your entire system."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Check out the hands-on tutorial on YouTube!"),(0,r.kt)("iframe",{width:"100%",height:"250",src:"https://www.youtube.com/embed/Wv38LNleUpE",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})),(0,r.kt)("h2",{id:"how-it-works"},"How It Works"),(0,r.kt)("p",null,"The following is a high-level sequence diagram of how Playwright and Tracetest interact with the different pieces of the system."),(0,r.kt)("mermaid",{value:"sequenceDiagram\n  Playwright->>+Scripts: Execute tests\n  Scripts->>+@tracetest/playwright: Createst instance\n  @tracetest/playwright--\x3e>-Scripts: Ok\n  Scripts->>+Scripts: Visits website\n  Scripts->>+@tracetest/playwright: captures and injects traceparent meta tag\n  @tracetest/playwright->>+@tracetest/playwright: Executes test\n  @tracetest/playwright--\x3e>-Scripts: Ok\n  Scripts->>@tracetest/playwright: Waits for results and shows the summary"}),(0,r.kt)("h2",{id:"the-tracetestplaywright-npm-package"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"@tracetest/playwright")," npm Package"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@tracetest/playwright"},(0,r.kt)("inlineCode",{parentName:"a"},"@tracetest/playwright"))," npm package is a Playwright plugin that allows you to run trace-based testing using Tracetest and Playwright. It is a wrapper around the Tracetest API that allows you to configure, orchestrate and run tests from Playwright."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Tracetest Account"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sign up to ",(0,r.kt)("a",{parentName:"li",href:"https://app.tracetest.io"},(0,r.kt)("inlineCode",{parentName:"a"},"app.tracetest.io"))," or follow the ",(0,r.kt)("a",{parentName:"li",href:"/getting-started/installation"},"get started")," docs."),(0,r.kt)("li",{parentName:"ul"},"Create an ",(0,r.kt)("a",{parentName:"li",href:"/concepts/environments"},"environment"),"."),(0,r.kt)("li",{parentName:"ul"},"Create an ",(0,r.kt)("a",{parentName:"li",href:"/concepts/environment-tokens"},"environment token"),"."),(0,r.kt)("li",{parentName:"ul"},"Have access to the environment's ",(0,r.kt)("a",{parentName:"li",href:"/configuration/agent"},"agent API key"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pokeshop Demo:")," Clone the official ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/pokeshop"},"Tracetest Pokeshop Demo App Repo")," to your local machine."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Docker"),": Have ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine."),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"The project is built with Docker Compose."),(0,r.kt)("h3",{id:"pokeshop-demo-app"},"Pokeshop Demo App"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/live-examples/pokeshop/overview"},"Pokeshop Demo App")," is a complete example of a distributed application using different backend and front-end services, implementation code is written in Typescript."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file in the root directory is for the Pokeshop Demo app and the OpenTelemetry setup.\nAnd the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.e2e.yml")," includes the ",(0,r.kt)("a",{parentName:"p",href:"/concepts/agent"},"Tracetest Agent"),"."),(0,r.kt)("p",null,"Finally, the Playwright E2E tests can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"playwright/e2e/1-getting-started"),"."),(0,r.kt)("h2",{id:"the-playwright-setup"},"The Playwright Setup"),(0,r.kt)("p",null,"The Playwright setup is pretty straightforward, it was generated by installing the Playwright dependency and configuring it from the UI after running ",(0,r.kt)("inlineCode",{parentName:"p"},"playwright open"),". The configuration script looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineConfig, devices } from "@playwright/test";\nimport { config } from "dotenv";\n\nconfig();\nexport default defineConfig({\n  testDir: "./playwright",\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: "html",\n  use: {\n    baseURL: process.env.POKESHOP_DEMO_URL || "http://localhost:3000",\n    trace: "on-first-retry",\n  },\n  projects: [\n    {\n      name: \'chromium\',\n      use: {\n        ...devices[\'Desktop Chrome\'],\n        launchOptions: {\n          args: [\'--disable-web-security\'],\n        },\n      },\n    },\n  ],\n});\n')),(0,r.kt)("p",null,"Before moving forward, run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm i")," in the root folder to install the dependencies."),(0,r.kt)("h3",{id:"the-homespects-test-script"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"home.spec.ts")," Test Script"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"home.spec.ts")," test script contains three different tests based on the Pokeshop Demo UI fetures, which are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a Pokemon"),(0,r.kt)("li",{parentName:"ol"},"Import a Pokemon (using an async process)"),(0,r.kt)("li",{parentName:"ol"},"Delete a Pokemon")),(0,r.kt)("h3",{id:"tracetest-library-setup"},"Tracetest Library Setup"),(0,r.kt)("p",null,"If you go to the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file you will find the inclusion of a Tracetest package for Playwright ",(0,r.kt)("inlineCode",{parentName:"p"},"@tracetest/playwright"),".\nThe first thing the test script does is import the package, grab the Tracetest API token from the environment variables and create the Tracetest instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { test, expect } from "@playwright/test";\nimport Tracetest, { Types } from "@tracetest/playwright";\nconst { TRACETEST_API_TOKEN = "" } = process.env;\n\nlet tracetest: Types.TracetestPlaywright | undefined = undefined;\n')),(0,r.kt)("p",null,"Afterward, during the ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAll")," hook, create the Tracetest instance with the API token."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'test.beforeAll(async () => {\n  tracetest = await Tracetest({ apiToken: TRACETEST_API_TOKEN });\n\n  // optional, set the definition files and run info for the tests\n  tracetest.setOptions({\n    "Playwright: imports a pokemon": {\n      definition,\n    },\n  });\n});\n')),(0,r.kt)("p",null,"Then, during the ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeEach")," hook, the script ",(0,r.kt)("strong",{parentName:"p"},"captures")," the document to inject the ",(0,r.kt)("inlineCode",{parentName:"p"},"traceparent")," to the meta tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'test.beforeEach(async ({ page }, { title }) => {\n  await page.goto("/");\n  await tracetest?.capture(title, page);\n});\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OPTIONAL"),": If you want to wait for the test to finish and break the Playwright execution based on a failed Tracetest test, you can add the ",(0,r.kt)("inlineCode",{parentName:"p"},"after")," hook and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"summary")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"test.afterAll(async ({}, testInfo) => {\n  testInfo.setTimeout(60000);\n  await tracetest.summary();\n});\n")),(0,r.kt)("p",null,"The rest of the test script is the Playwright test definitions for the test cases mentioned above. The complete test script looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { test, expect } from "@playwright/test";\nimport Tracetest, { Types } from "@tracetest/playwright";\nconst { TRACETEST_API_TOKEN = "" } = process.env;\n\nlet tracetest: Types.TracetestPlaywright | undefined = undefined;\n\ntest.describe.configure({ mode: "serial" });\n\nconst definition = `\n  type: Test\n  spec:\n    id: UGxheXdyaWdodDogaW1wb3J0cyBhIHBva2Vtb24=\n    name: "Playwright: imports a pokemon"\n    trigger:\n      type: playwright\n    specs:\n    - selector: span[tracetest.span.type="http"] span[tracetest.span.type="http"]\n      name: "All HTTP Spans: Status  code is 200"\n      assertions:\n      - attr:http.status_code   =   200\n    - selector: span[tracetest.span.type="database"]\n      name: "All Database Spans: Processing time is less than 100ms"\n      assertions:\n      - attr:tracetest.span.duration < 2s\n    outputs:\n    - name: MY_OUTPUT\n      selector: span[tracetest.span.type="general" name="Tracetest trigger"]\n      value: attr:name\n    `;\n\ntest.beforeAll(async () => {\n  tracetest = await Tracetest({ apiToken: TRACETEST_API_TOKEN });\n  tracetest.setOptions({\n    "Playwright: imports a pokemon": {\n      definition,\n    },\n  });\n});\n\ntest.beforeEach(async ({ page }, { title }) => {\n  await page.goto("/");\n  await tracetest?.capture(title, page);\n});\n\n// optional step to break the playwright script in case a Tracetest test fails\ntest.afterAll(async ({}, testInfo) => {\n  testInfo.setTimeout(60000);\n  await tracetest?.summary();\n});\n\ntest("Playwright: creates a pokemon", async ({ page }) => {\n  expect(await page.getByText("Pokeshop")).toBeTruthy();\n\n  await page.click("text=Add");\n\n  await page.getByLabel("Name").fill("Charizard");\n  await page.getByLabel("Type").fill("Flying");\n  await page\n    .getByLabel("Image URL")\n    .fill("https://upload.wikimedia.org/wikipedia/en/1/1f/Pok%C3%A9mon_Charizard_art.png");\n  await page.getByRole("button", { name: "OK", exact: true }).click();\n});\n\ntest("Playwright: imports a pokemon", async ({ page }) => {\n  expect(await page.getByText("Pokeshop")).toBeTruthy();\n\n  await page.click("text=Import");\n\n  await page.getByLabel("ID").fill(Math.floor(Math.random() * 101).toString());\n  await page.getByRole("button", { name: "OK", exact: true }).click();\n});\n\ntest("Playwright: deletes a pokemon", async ({ page }) => {\n  await page.locator(\'[data-cy="pokemon-list"]\');\n\n  await page.locator(\'[data-cy="pokemon-card"]\').first().click();\n  await page.locator(\'[data-cy="pokemon-card"] [data-cy="delete-pokemon-button"]\').first().click();\n});\n')),(0,r.kt)("h3",{id:"setting-the-environment-variables"},"Setting the Environment Variables"),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},".env.template")," file to ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," and add the Tracetest API token and agent tokens to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TRACETEST_API_TOKEN")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TRACETEST_AGENT_API_KEY")," variables."),(0,r.kt)("h3",{id:"starting-the-pokeshop-demo-app"},"Starting the Pokeshop Demo App"),(0,r.kt)("p",null,"To start the Pokeshop Demo App, run the following command from the root directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose -f docker-compose.yml -f docker-compose.e2e.yml up\n")),(0,r.kt)("h3",{id:"running-the-tests"},"Running the Tests"),(0,r.kt)("p",null,"Next, you can run the tests by using both the Playwright CLI and the Playwright UI."),(0,r.kt)("h4",{id:"using-the-playwright-cli"},"Using the Playwright CLI"),(0,r.kt)("p",null,"To run the tests using the Playwright CLI, run the following command from the root directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run pw:run\n")),(0,r.kt)("p",null,"You should see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\n> pokeshop@1.0.0 pw:run\n> playwright test\n\n\nRunning 3 tests using 1 worker\n[chromium] \u203a home.spec.ts:30:5 \u203a Playwright: creates a pokemon\nTest `Playwright: creates a pokemon` started\nFind the results at https://app.tracetest.io/organizations/ttorg_2179a9cd8ba8dfa5/environments/ttenv_231b49e808c29e6a/test/UGxheXdyaWdodDogY3JlYXRlcyBhIHBva2Vtb24=/run/41\n[chromium] \u203a home.spec.ts:65:5 \u203a Playwright: imports a pokemon\nTest `Playwright: imports a pokemon` started\nFind the results at https://app.tracetest.io/organizations/ttorg_2179a9cd8ba8dfa5/environments/ttenv_231b49e808c29e6a/test/UGxheXdyaWdodDogaW1wb3J0cyBhIHBva2Vtb24=/run/41\n[chromium] \u203a home.spec.ts:76:5 \u203a Playwright: deletes a pokemon\nTest `Playwright: deletes a pokemon` started\nFind the results at https://app.tracetest.io/organizations/ttorg_2179a9cd8ba8dfa5/environments/ttenv_231b49e808c29e6a/test/UGxheXdyaWdodDogZGVsZXRlcyBhIHBva2Vtb24=/run/43\nTest `Playwright: creates a pokemon` finished\nTest `Playwright: imports a pokemon` finished\nTest `Playwright: deletes a pokemon` finished\n\nSuccessful: 3\nFailed: 0\n\n[SUCCESSFUL] Playwright: creates a pokemon - https://app.tracetest.io/organizations/ttorg_2179a9cd8ba8dfa5/environments/ttenv_231b49e808c29e6a/test/UGxheXdyaWdodDogY3JlYXRlcyBhIHBva2Vtb24=/run/41\n[SUCCESSFUL] Playwright: imports a pokemon - https://app.tracetest.io/organizations/ttorg_2179a9cd8ba8dfa5/environments/ttenv_231b49e808c29e6a/test/UGxheXdyaWdodDogaW1wb3J0cyBhIHBva2Vtb24=/run/41\n[SUCCESSFUL] Playwright: deletes a pokemon - https://app.tracetest.io/organizations/ttorg_2179a9cd8ba8dfa5/environments/ttenv_231b49e808c29e6a/test/UGxheXdyaWdodDogZGVsZXRlcyBhIHBva2Vtb24=/run/43\n\n  3 passed (47.9s)\n\nTo open last HTML report run:\n\nnpx playwright show-report\n")),(0,r.kt)("h4",{id:"using-the-playwright-ui"},"Using the Playwright UI"),(0,r.kt)("p",null,"To run the tests using the Playwright UI, run the following command from the root directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run pw:open\n")),(0,r.kt)("p",null,"Then, click the play button at the top."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Playwright UI",src:a(58325).Z,width:"1622",height:"984"})),(0,r.kt)("p",null,"You should see the three tests running and passing.\nAnd by looking at the console log you can find the statuses and results of the tests."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Playwright Results",src:a(59127).Z,width:"1324",height:"311"})),(0,r.kt)("p",null,"Then, you can follow any of the result links in the console log to the Tracetest App and see the results of the tests."),(0,r.kt)("p",null,"The Tracetest library uses the test name for the trace-based tests. That way you can identify them more easily and it also fills some of the metadata directly from the Playwright execution."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tracetest App",src:a(98612).Z,width:"2560",height:"1600"})),(0,r.kt)("p",null,"Lastly, you can now create assertions based on the trace data that was captured from the browser to the backend services."),(0,r.kt)("p",null,"Starting with the click events and the fetch request from the client side, to the HTTP requests and database queries from the backend services, including async processes like the one showcased during the import pokemon test."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Tracetest App",src:a(58572).Z,width:"2560",height:"1600"})))}d.isMDXComponent=!0},59127:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/playwright-open-results-cedf1a616e325f68e1bcb66001458a62.png"},58325:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/playwright-scripts-8b9575c63785289f75a672dd115bf1b5.png"},58572:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/playwright-tracetest-import-pokemon-test-7a6b1b5b891c0cfa9f91613313e53d0f.png"},98612:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/playwright-tracetest-tests-67498eee80dc01d55c346674c8b35216.png"}}]);