"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[9193],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"testing-vercel-functions-with-opentelemetry-tracetest",title:"Testing Vercel Functions (Next.js) with OpenTelemetry and Tracetest",description:"Quick start on how to configure Vercel functions with OpenTelemetry and Tracetest for enhancing your integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","cypress","end to end testing","end-to-end testing","integration testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},s=void 0,i={unversionedId:"examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest",id:"examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest",title:"Testing Vercel Functions (Next.js) with OpenTelemetry and Tracetest",description:"Quick start on how to configure Vercel functions with OpenTelemetry and Tracetest for enhancing your integration tests with trace-based testing.",source:"@site/docs/examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest",permalink:"/examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest.mdx",tags:[],version:"current",frontMatter:{id:"testing-vercel-functions-with-opentelemetry-tracetest",title:"Testing Vercel Functions (Next.js) with OpenTelemetry and Tracetest",description:"Quick start on how to configure Vercel functions with OpenTelemetry and Tracetest for enhancing your integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","cypress","end to end testing","end-to-end testing","integration testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"examplesTutorialsSidebar",previous:{title:"Testing Kafka in a Go API with OpenTelemetry and Tracetest",permalink:"/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest"},next:{title:"Testing AWS Lambda Functions (Serverless Framework) with OpenTelemetry and Tracetest",permalink:"/examples-tutorials/recipes/testing-lambda-functions-with-opentelemetry-tracetest"}},l={},p=[{value:"Why is this important?",id:"why-is-this-important",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Vercel (Next.js) Function",id:"1-vercel-nextjs-function",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Vercel (Next.js) Function",id:"vercel-nextjs-function",level:2},{value:"Set up Environment Variables",id:"set-up-environment-variables",level:3},{value:"Start the Next.js Vercel Function",id:"start-the-nextjs-vercel-function",level:3},{value:"Testing the Vercel Function Locally",id:"testing-the-vercel-function-locally",level:2},{value:"Integration Testing the Vercel Function",id:"integration-testing-the-vercel-function",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/integration-testing-vercel-functions"},"Check out the source code on GitHub here."))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://vercel.com/"},"Vercel")," is a platform that hosts serverless functions and front-end code offering developers scalability and flexibility with no infrastructure overhead."),(0,a.kt)("h2",{id:"why-is-this-important"},"Why is this important?"),(0,a.kt)("p",null,"Testing Serverless Functions has been a pain point for years. Not having visibility into the infrastructure and not knowing where a test fails causes the MTTR to be higher than for other tools. Including OpenTelemetry in Vercel functions exposes telemetry that you can use for both production visibility and trace-based testing."),(0,a.kt)("p",null,"This sample shows how to run integration tests against Vercel Functions using ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," and Tracetest."),(0,a.kt)("p",null,"The Vercel function will fetch data from an external API, transform the data and insert it into a Vercel Postgres database. This particular flow has two failure points that are difficult to test."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Validating that an external API request from a Vercel function is successful."),(0,a.kt)("li",{parentName:"ol"},"Validating that a Postgres insert request is successful.")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tracetest Account"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sign up to ",(0,a.kt)("a",{parentName:"li",href:"https://app.tracetest.io"},(0,a.kt)("inlineCode",{parentName:"a"},"app.tracetest.io"))," or follow the ",(0,a.kt)("a",{parentName:"li",href:"/getting-started/installation"},"get started")," docs."),(0,a.kt)("li",{parentName:"ul"},"Create an ",(0,a.kt)("a",{parentName:"li",href:"/concepts/environments"},"environment"),"."),(0,a.kt)("li",{parentName:"ul"},"Create an ",(0,a.kt)("a",{parentName:"li",href:"/concepts/environment-tokens"},"environment token"),"."),(0,a.kt)("li",{parentName:"ul"},"Have access to the environment's ",(0,a.kt)("a",{parentName:"li",href:"/configuration/agent"},"agent API key"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://vercel.com/"},"Vercel Account")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://vercel.com/docs/storage/vercel-postgres"},"Vercel Postgres Database"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Vercel Functions Example:")),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest"},"Tracetest GitHub Repo")," to your local machine, and open the Vercel example app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/kubeshop/tracetest.git\ncd tracetest/examples/integration-testing-vercel-functions\n")),(0,a.kt)("p",null,"Before moving forward, run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm i")," in the root folder to install the dependencies."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Docker"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Have ",(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine.")),(0,a.kt)("h2",{id:"project-structure"},"Project Structure"),(0,a.kt)("p",null,"This is a ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," project bootstrapped with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vercel/next.js/tree/canary/packages/create-next-app"},(0,a.kt)("inlineCode",{parentName:"a"},"create-next-app")),"."),(0,a.kt)("p",null,"It's using Vercel Functions via ",(0,a.kt)("inlineCode",{parentName:"p"},"/pages/api"),", with ",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/pages/building-your-application/optimizing/open-telemetry#manual-opentelemetry-configuration"},"OpenTelemetry configured as explained in the Vercel docs"),"."),(0,a.kt)("h3",{id:"1-vercel-nextjs-function"},"1. Vercel (Next.js) Function"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file reference the Next.js app with ",(0,a.kt)("inlineCode",{parentName:"p"},"next-app"),"."),(0,a.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file also has a Tracetest Agent service and an integration tests service."),(0,a.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"next-app:3000")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"test/api.pokemon.spec.docker.yaml")," will map to the ",(0,a.kt)("inlineCode",{parentName:"p"},"next-app")," service."),(0,a.kt)("h2",{id:"vercel-nextjs-function"},"Vercel (Next.js) Function"),(0,a.kt)("p",null,"The Vercel Function is a simple API, ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/integration-testing-vercel-functions/pages/api/pokemon.ts"},"contained in the ",(0,a.kt)("inlineCode",{parentName:"a"},"pages/api/pokemon.ts")," file"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { trace, SpanStatusCode } from '@opentelemetry/api'\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { sql } from '@vercel/postgres'\n\nexport async function addPokemon(pokemon: any) {\n  return await sql`\n    INSERT INTO pokemon (name)\n    VALUES (${pokemon.name})\n    RETURNING *;\n  `\n}\n\nexport async function getPokemon(pokemon: any) {\n  return await sql`\n    SELECT * FROM pokemon where id=${pokemon.id};\n  `\n}\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const activeSpan = trace.getActiveSpan()\n  const tracer = await trace.getTracer('integration-testing-vercel-functions')\n  \n  try {\n\n    const externalPokemon = await tracer.startActiveSpan('GET Pokemon from pokeapi.co', async (externalPokemonSpan) => {\n      const requestUrl = `https://pokeapi.co/api/v2/pokemon/${req.body.id || '6'}`\n      const response = await fetch(requestUrl)\n      const { id, name } = await response.json()\n\n      externalPokemonSpan.setStatus({ code: SpanStatusCode.OK, message: String(\"Pokemon fetched successfully!\") })\n      externalPokemonSpan.setAttribute('pokemon.name', name)\n      externalPokemonSpan.setAttribute('pokemon.id', id)\n      externalPokemonSpan.end()\n\n      return { id, name }\n    })\n\n    const addedPokemon = await tracer.startActiveSpan('Add Pokemon to Vercel Postgres', async (addedPokemonSpan) => {\n      const { rowCount, rows: [addedPokemon, ...rest] } = await addPokemon(externalPokemon)\n      addedPokemonSpan.setAttribute('pokemon.isAdded', rowCount === 1)\n      addedPokemonSpan.setAttribute('pokemon.added.name', addedPokemon.name)\n      addedPokemonSpan.end()\n      return addedPokemon\n    })\n    \n    res.status(200).json(addedPokemon)\n\n  } catch (err) {\n    activeSpan?.setAttribute('error', String(err))\n    activeSpan?.recordException(String(err))\n    activeSpan?.setStatus({ code: SpanStatusCode.ERROR, message: String(err) })\n    res.status(500).json({ error: 'failed to load data' })\n  } finally {\n    activeSpan?.end()\n  }\n}\n")),(0,a.kt)("p",null,"The OpenTelemetry tracing is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/integration-testing-vercel-functions/instrumentation.node.ts"},"contained in the ",(0,a.kt)("inlineCode",{parentName:"a"},"instrumentation.node.ts")," file"),". Traces will be sent to the Tracetest Agent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions'\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node'\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch'\n\nconst sdk = new NodeSDK({\n  // The OTEL_EXPORTER_OTLP_ENDPOINT env var is passed into \"new OTLPTraceExporter\" automatically.\n  // If the OTEL_EXPORTER_OTLP_ENDPOINT env var is not set the \"new OTLPTraceExporter\" will\n  // default to use \"http://localhost:4317\" for gRPC and \"http://localhost:4318\" for HTTP.\n  // This sample is using HTTP.\n  traceExporter: new OTLPTraceExporter(),\n  instrumentations: [\n    getNodeAutoInstrumentations(),\n    new FetchInstrumentation(),\n  ],\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'integration-testing-vercel-functions',\n  }),\n})\nsdk.start()\n")),(0,a.kt)("h3",{id:"set-up-environment-variables"},"Set up Environment Variables"),(0,a.kt)("p",null,"Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},".env.development")," file. Add your Vercel Postgres env vars."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=.env.development.local",title:".env.development.local"},'# OTLP HTTP\nOTEL_EXPORTER_OTLP_ENDPOINT="http://localhost:4318"\n\n# Vercel Postgres\nPOSTGRES_DATABASE="**********"\nPOSTGRES_HOST="**********"\nPOSTGRES_PASSWORD="**********"\nPOSTGRES_PRISMA_URL="**********"\nPOSTGRES_URL="**********"\nPOSTGRES_URL_NON_POOLING="**********"\nPOSTGRES_USER="**********"\n')),(0,a.kt)("h3",{id:"start-the-nextjs-vercel-function"},"Start the Next.js Vercel Function"),(0,a.kt)("p",null,"Spin up your Next.js app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,a.kt)("p",null,"This starts the function on ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/api/pokemon"),"."),(0,a.kt)("h2",{id:"testing-the-vercel-function-locally"},"Testing the Vercel Function Locally"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/getting-started/installation#install-the-tracetest-cli"},"Download the CLI")," for your operating system."),(0,a.kt)("p",null,"The CLI is bundled with ",(0,a.kt)("a",{parentName:"p",href:"/concepts/agent/"},"Tracetest Agent")," that runs in your infrastructure to collect responses and traces for tests."),(0,a.kt)("p",null,"To start Tracetest Agent add the ",(0,a.kt)("inlineCode",{parentName:"p"},"--api-key")," from your environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Terminal",title:"Terminal"},"tracetest start --api-key YOUR_AGENT_API_KEY\n")),(0,a.kt)("p",null,"Run a test with the test definition ",(0,a.kt)("inlineCode",{parentName:"p"},"test/api.pokemon.spec.development.yaml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=test/api.pokemon.spec.development.yaml",title:"test/api.pokemon.spec.development.yaml"},'type: Test\nspec:\n  id: kv8C-hOSR\n  name: Test API\n  trigger:\n    type: http\n    httpRequest:\n      method: POST\n      url: http://localhost:3000/api/pokemon\n      body: "{\\n  \\"id\\": \\"6\\"\\n}"\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http"]\n    name: "All HTTP Spans: Status  code is 200"\n    assertions:\n    - attr:http.status_code = 200\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Terminal",title:"Terminal"},"tracetest run test -f ./test/api.pokemon.spec.development.yaml --required-gates test-specs --output pretty\n\n[Output]\n\u2714 Test API (https://app.tracetest.io/organizations/ttorg_e66318ba6544b856/environments/ttenv_0e807879e2e38d28/test/-gjd4idIR/run/22/test) - trace id: f2250362ff2f70f8f5be7b2fba74e4b2\n    \u2714 All HTTP Spans: Status code is 200\n")),(0,a.kt)("h2",{id:"integration-testing-the-vercel-function"},"Integration Testing the Vercel Function"),(0,a.kt)("p",null,"Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},".env.docker")," file to use your Vercel Postgres env vars."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=.env.docker",title:".env.docker"},'# OTLP HTTP\nOTEL_EXPORTER_OTLP_ENDPOINT="http://tracetest-agent:4318"\n\n# Vercel Postgres\nPOSTGRES_DATABASE="**********"\nPOSTGRES_HOST="**********"\nPOSTGRES_PASSWORD="**********"\nPOSTGRES_PRISMA_URL="**********"\nPOSTGRES_URL="**********"\nPOSTGRES_URL_NON_POOLING="**********"\nPOSTGRES_USER="**********"\n')),(0,a.kt)("p",null,"This configures the ",(0,a.kt)("inlineCode",{parentName:"p"},"OTEL_EXPORTER_OTLP_ENDPOINT")," to send traces to Tracetest Agent."),(0,a.kt)("p",null,"Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the root directory. Add your ",(0,a.kt)("inlineCode",{parentName:"p"},"TRACETEST_API_KEY"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=docker-compose.yaml",title:"docker-compose.yaml"},"  # [...]\n  tracetest-agent:\n    image: kubeshop/tracetest-agent:latest\n    environment:\n      - TRACETEST_API_KEY=YOUR_TRACETEST_API_KEY # Find the Agent API Key here: https://docs.tracetest.io/configuration/agent\n    ports:\n      - 4317:4317\n      - 4318:4318\n    networks:\n      - tracetest\n")),(0,a.kt)("p",null,"Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"run.bash"),". Add your ",(0,a.kt)("inlineCode",{parentName:"p"},"TRACETEST_API_TOKEN"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#/bin/bash\n\n# Find the API Token here: https://docs.tracetest.io/concepts/environment-tokens\ntracetest configure -t YOUR_TRACETEST_API_TOKEN\ntracetest run test -f ./api.pokemon.spec.docker.yaml --required-gates test-specs --output pretty\n")),(0,a.kt)("p",null,"Now you can run the Vercel function and Tracetest Agent!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d --build\n")),(0,a.kt)("p",null,"And, trigger the integration tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose run integration-tests\n\n[Ouput]\n[+] Creating 1/0\n \u2714 Container integration-testing-vercel-functions-tracetest-agent-1  Running                                                                                             0.0s\n SUCCESS  Successfully configured Tracetest CLI\n\u2714 Test API (https://app.tracetest.io/organizations/ttorg_e66318ba6544b856/environments/ttenv_82af376d61da80a0/test/p00W82OIR/run/8/test) - trace id: d64ab3a6f52a98141d26679fff3373b6\n    \u2714 All HTTP Spans: Status code is 200\n")),(0,a.kt)("h2",{id:"learn-more"},"Learn More"),(0,a.kt)("p",null,"Feel free to check out our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,a.kt)("a",{parentName:"p",href:"https://dub.sh/tracetest-community"},"Slack Community")," for more info!"))}m.isMDXComponent=!0}}]);