"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1172],{18679:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),o=n(86010);const r={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,s),hidden:n},t)}},73992:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(87462),o=n(67294),r=n(86010),s=n(72957),i=n(16550),l=n(75238),c=n(33609),p=n(92560);function u(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function m(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=m(e),[s,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[l,c]=h({queryString:n,groupId:a}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,p.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),k=(()=>{const e=l??u;return d({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,r]),tabValues:r}}var k=n(51048);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=p.indexOf(t),a=c[n].value;a!==i&&(u(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},s,{className:(0,r.Z)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function T(e){const t=g(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",y.tabList)},o.createElement(N,(0,a.Z)({},e,t)),o.createElement(f,(0,a.Z)({},e,t)))}function b(e){const t=(0,k.Z)();return o.createElement(T,(0,a.Z)({key:String(t)},e))}},86618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(87462),o=(n(67294),n(3905)),r=n(73992),s=n(18679);n(92053);const i={id:"running-tracetest-with-sumologic",title:"Node.js and Sumo Logic",description:"Quick start on how to configure a Node.js app with OpenTelemetry traces, Sumo Logic as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",hide_table_of_contents:!0,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},l=void 0,c={unversionedId:"examples-tutorials/recipes/running-tracetest-with-sumologic",id:"examples-tutorials/recipes/running-tracetest-with-sumologic",title:"Node.js and Sumo Logic",description:"Quick start on how to configure a Node.js app with OpenTelemetry traces, Sumo Logic as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-sumologic.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-sumologic",permalink:"/examples-tutorials/recipes/running-tracetest-with-sumologic",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-sumologic.mdx",tags:[],version:"current",frontMatter:{id:"running-tracetest-with-sumologic",title:"Node.js and Sumo Logic",description:"Quick start on how to configure a Node.js app with OpenTelemetry traces, Sumo Logic as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",hide_table_of_contents:!0,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"examplesTutorialsSidebar",previous:{title:"Node.js and OpenSearch",permalink:"/examples-tutorials/recipes/running-tracetest-with-opensearch"},next:{title:"CI/CD Automation",permalink:"/ci-cd-automation/overview"}},p={},u=[{value:"Node.js App with Sumo Logic, OpenTelemetry, and Tracetest",id:"nodejs-app-with-sumo-logic-opentelemetry-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Tracetest Agent",id:"1-tracetest-agent",level:3},{value:"2. Node.js App",id:"2-nodejs-app",level:3},{value:"Run the Node.js App and Sumo Logic OpenTelemetry Collector with Docker Compose",id:"run-the-nodejs-app-and-sumo-logic-opentelemetry-collector-with-docker-compose",level:2},{value:"Run Tracetest Tests",id:"run-tracetest-tests",level:2},{value:"Prerequisites",id:"prerequisites-1",level:2},{value:"Project Structure",id:"project-structure-1",level:2},{value:"1. Node.js App",id:"1-nodejs-app",level:3},{value:"2. Tracetest Core",id:"2-tracetest-core",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js App",id:"nodejs-app",level:2},{value:"Tracetest Core",id:"tracetest-core",level:2},{value:"Run Both the Node.js App and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Learn More",id:"learn-more",level:2}],m={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-sumologic-nodejs"},"Check out the source code on GitHub here."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,o.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.sumologic.com/"},"Sumo Logic")," is a cloud-based machine data analytics company focusing on security, operations and BI use-cases. It provides log management and analytics services that use machine-generated big data."),(0,o.kt)("h2",{id:"nodejs-app-with-sumo-logic-opentelemetry-and-tracetest"},"Node.js App with Sumo Logic, OpenTelemetry, and Tracetest"),(0,o.kt)("p",null,"This is a simple quick start on how to configure a Node.js app to use OpenTelemetry instrumentation with traces and Tracetest for enhancing your E2E and integration tests with trace-based testing. The infrastructure will use Sumo Logic as the trace data store, and the Sumo Logic distribution of OpenTelemetry Collector to receive traces from the Node.js app and send them to Sumo Logic."),(0,o.kt)(r.Z,{groupId:"running-tracetest-without-a-trace-data-store",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"Tracetest",label:"Tracetest",default:!0,mdxType:"TabItem"},(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"You can run this example with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker"),"."),(0,o.kt)("h2",{id:"project-structure"},"Project Structure"),(0,o.kt)("p",null,"The project contains ",(0,o.kt)("a",{parentName:"p",href:"/getting-started/installation#install-the-tracetest-agent"},"Tracetest Agent"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SumoLogic/sumologic-otel-collector/tree/main"},"Sumo Logic OpenTelemetry Collector"),", and a Node.js app."),(0,o.kt)("h3",{id:"1-tracetest-agent"},"1. Tracetest Agent"),(0,o.kt)("p",null,"Install and run Tracetest Agent locally."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=Terminal",title:"Terminal"},"tracetest start\n")),(0,o.kt)("p",null,"Once started, Tracetest Agent will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Expose OTLP ports ",(0,o.kt)("inlineCode",{parentName:"li"},"4317")," (gRPC) and ",(0,o.kt)("inlineCode",{parentName:"li"},"4318")," (HTTP) for trace ingestion."),(0,o.kt)("li",{parentName:"ul"},"Be able to trigger test runs in the environment where it is running."),(0,o.kt)("li",{parentName:"ul"},"Be able to connect to a trace data store that is not accessible outside of your environment.")),(0,o.kt)("p",null,"Configure Sumo Logic as a Tracing Backend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=tracetest.datastore.yaml",title:"tracetest.datastore.yaml"},'---\ntype: DataStore\nspec:\n  name: Sumo Logic\n  type: sumologic\n  sumologic:\n    # The URL will differ based on your location. View this\n    # docs page to figure out which URL you need:\n    # https://help.sumologic.com/docs/api/getting-started/#which-endpoint-should-i-should-use\n    url: "https://api.sumologic.com/api/"\n    # Create your ID and Key under Administration > Security > Access Keys\n    # in your Sumo Logic account:\n    # https://help.sumologic.com/docs/manage/security/access-keys/#create-your-access-key\n    accessID: "your-access-id"\n    accessKey: "your-access-key"\n')),(0,o.kt)("admonition",{title:"Configure Sumo Logic API and Access",type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Your Sumo Logic URL will differ based on which region you are using. ",(0,o.kt)("a",{parentName:"li",href:"https://help.sumologic.com/docs/api/getting-started/#which-endpoint-should-i-should-use"},"Here's a guide which Sumo Logic API endpoint to use"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://help.sumologic.com/docs/manage/security/access-keys/#create-your-access-key"},"Create your ID and Key under Administration > Security > Access Keys in your Sumo Logic account"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest apply datastore -f ./tracetest.datastore.yaml\n")),(0,o.kt)("h3",{id:"2-nodejs-app"},"2. Node.js App"),(0,o.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," file."),(0,o.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files.\nTraces will be sent to Tracetest Agent."),(0,o.kt)("p",null,"Here's the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const opentelemetry = require('@opentelemetry/sdk-node')\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node')\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');\n\nconst sdk = new opentelemetry.NodeSDK({\n  // OTEL_EXPORTER_OTLP_TRACES_ENDPOINT is passed into \"new OTLPTraceExporter\" automatically\n  traceExporter: new OTLPTraceExporter(),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\nsdk.start()\n")),(0,o.kt)("p",null,"Choosing the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file will send traces to Tracetest Agent's ",(0,o.kt)("inlineCode",{parentName:"p"},"GRPC"),"."),(0,o.kt)("p",null,"Configure it an environment variable:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Running in Docker: ",(0,o.kt)("inlineCode",{parentName:"li"},"OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317"))),(0,o.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "with-grpc-tracer":"node -r ./tracing.otel.grpc.js app.js",\n  "with-http-tracer":"node -r ./tracing.otel.http.js app.js"\n},\n')),(0,o.kt)("p",null,"To start the server, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run with-grpc-tracer\n# or\nnpm run with-http-tracer\n")),(0,o.kt)("h2",{id:"run-the-nodejs-app-and-sumo-logic-opentelemetry-collector-with-docker-compose"},"Run the Node.js App and Sumo Logic OpenTelemetry Collector with Docker Compose"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,o.kt)("p",null,"As you can see, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ "npm", "run", "with-grpc-tracer" ]\n')),(0,o.kt)("p",null,"And, the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains one service for the Node.js app and one service for the Sumo Logic OpenTelemetry Collector."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\nservices:\n  app:\n    image: quick-start-nodejs\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    build: .\n    ports:\n      - "8080:8080"\n    environment:\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317\n\n  otel-collector:\n    image: public.ecr.aws/sumologic/sumologic-otel-collector:0.75.0-sumo-0\n    volumes:\n      - ./collector.config.yaml:/etc/otel/config.yaml\n')),(0,o.kt)("p",null,"Traces sent to Sumo Logic from the OpenTelemetry Collector."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," configures the OpenTelemetry Collector. It receives traces via either ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Sumo Logic via the Sumo Logic ",(0,o.kt)("inlineCode",{parentName:"p"},"extension")," and an ",(0,o.kt)("inlineCode",{parentName:"p"},"installation_token"),"."),(0,o.kt)("admonition",{title:"Configure Sumo Logic Installation Token",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"View the ",(0,o.kt)("a",{parentName:"p",href:"https://help.sumologic.com/docs/manage/security/installation-tokens/"},"Sumo Logic docs here")," to learn more about installation tokens.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nexporters:\n  sumologic:\n\nextensions:\n  sumologic:\n    installation_token: <your-sumologic-installation-token>\n\nservice:\n  extensions: [sumologic]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [sumologic]\n")),(0,o.kt)("p",null,"To start it, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,o.kt)("p",null,"This will start the Node.js app and Sumo Logic OpenTelemetry Collector and send the traces to Sumo Logic."),(0,o.kt)("h2",{id:"run-tracetest-tests"},"Run Tracetest Tests"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open ",(0,o.kt)("a",{parentName:"p",href:"https://app.tracetest.io/"},"Tracetest"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/configuration/connecting-to-data-stores/sumologic"},"Configure Sumo Logic as a trace data store")," if you have not already as explained in ",(0,o.kt)("a",{parentName:"p",href:"#1-tracetest-agent"},'"1. Tracetest Agent"'),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Start creating tests! Make sure to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:8080/")," URL in your test creation."),(0,o.kt)("p",{parentName:"li"},"Alternatively, you can import this test as a quick start!"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  id: W656Q0c4g\n  name: Test API\n  description: Test the App.\n  trigger:\n    type: http\n    httpRequest:\n      url: http://localhost:8080\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http" name="GET /" http.target="/" http.method="GET"]\n    assertions:\n    - attr:http.status_code  =  200\n    - attr:tracetest.span.duration  <  500ms\n'))))),(0,o.kt)(s.Z,{value:"Tracetest Core",label:"Tracetest Core",mdxType:"TabItem"},(0,o.kt)("h2",{id:"prerequisites-1"},"Prerequisites"),(0,o.kt)("p",null,"You will need ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,o.kt)("h2",{id:"project-structure-1"},"Project Structure"),(0,o.kt)("p",null,"The project is built with Docker Compose. It contains two distinct ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files."),(0,o.kt)("h3",{id:"1-nodejs-app"},"1. Node.js App"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,o.kt)("h3",{id:"2-tracetest-core"},"2. Tracetest Core"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling trace-based testing with Tracetest."),(0,o.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"app:8080")," will map to the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," service."),(0,o.kt)("h2",{id:"nodejs-app"},"Node.js App"),(0,o.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," file."),(0,o.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files.\nTraces will be sent to the OpenTelemetry Collector."),(0,o.kt)("p",null,"Here's the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const opentelemetry = require('@opentelemetry/sdk-node')\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node')\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');\n\nconst sdk = new opentelemetry.NodeSDK({\n  // OTEL_EXPORTER_OTLP_TRACES_ENDPOINT is passed into \"new OTLPTraceExporter\" automatically\n  traceExporter: new OTLPTraceExporter(),\n  instrumentations: [getNodeAutoInstrumentations()],\n})\nsdk.start()\n")),(0,o.kt)("p",null,"Choosing the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file will send traces to Tracetest Agent's ",(0,o.kt)("inlineCode",{parentName:"p"},"GRPC"),"."),(0,o.kt)("p",null,"Configure it an environment variable:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Running in Docker: ",(0,o.kt)("inlineCode",{parentName:"li"},"OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "with-grpc-tracer":"node -r ./tracing.otel.grpc.js app.js",\n  "with-http-tracer":"node -r ./tracing.otel.http.js app.js"\n},\n')),(0,o.kt)("p",null,"To start the server, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run with-grpc-tracer\n# or\nnpm run with-http-tracer\n")),(0,o.kt)("p",null,"As you can see, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ "npm", "run", "with-grpc-tracer" ]\n')),(0,o.kt)("p",null,"And, the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains one service for the Node.js app and one service for the Sumo Logic OpenTelemetry Collector."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3\'\nservices:\n  app:\n    image: quick-start-nodejs\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    build: .\n    ports:\n      - "8080:8080"\n    environment:\n      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317\n\n  otel-collector:\n    image: public.ecr.aws/sumologic/sumologic-otel-collector:0.75.0-sumo-0\n    volumes:\n      - ./collector.config.yaml:/etc/otel/config.yaml\n')),(0,o.kt)("p",null,"Traces sent to Sumo Logic from the OpenTelemetry Collector."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," configures the OpenTelemetry Collector. It receives traces via either ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Sumo Logic via the Sumo Logic ",(0,o.kt)("inlineCode",{parentName:"p"},"extension")," and an ",(0,o.kt)("inlineCode",{parentName:"p"},"installation_token"),". "),(0,o.kt)("admonition",{title:"Configure Sumo Logic Installation Token",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"View the ",(0,o.kt)("a",{parentName:"p",href:"https://help.sumologic.com/docs/manage/security/installation-tokens/"},"Sumo Logic docs here")," to learn more about installation tokens.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="collector.config.yaml"',title:'"collector.config.yaml"'},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nexporters:\n  sumologic:\n\nextensions:\n  sumologic:\n    installation_token: <your-sumologic-installation-token>\n\nservice:\n  extensions: [sumologic]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [sumologic]\n")),(0,o.kt)("p",null,"To start it, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,o.kt)("p",null,"This will start the Node.js app and Sumo Logic OpenTelemetry Collector and send the traces to Sumo Logic."),(0,o.kt)("p",null,"Let's add trace-based testing by configuring Tracetest."),(0,o.kt)("h2",{id:"tracetest-core"},"Tracetest Core"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with two services."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/kubeshop/tracetest"},(0,o.kt)("strong",{parentName:"a"},"Tracetest Core"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="./tracetest/docker-compose.yaml"',title:'"./tracetest/docker-compose.yaml"'},'version: "3"\nservices:\n  tracetest:\n    image: kubeshop/tracetest:latest\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provisioning.yaml\n    ports:\n      - 11633:11633\n    command: --provisioning-file /app/provisioning.yaml\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n')),(0,o.kt)("p",null,"Tracetest Core depends on both Postgres and the Sumo Logic OpenTelemetry Collector from the root ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml"),". Tracetest Core requires config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,o.kt)("p",null,"To start both the Node.js app and Tracetest Core we will run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml build\ndocker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest Core to the Postgres instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="tracetest-config.yaml"',title:'"tracetest-config.yaml"'},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," file provisions the trace data store and polling to store in the Postgres database. The data store is set to Sumo Logic, meaning the Tracetest Core will fetch traces from Sumo Logic when tests are run."),(0,o.kt)("p",null,"You'll need to set Sumo Logic:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"URL"),(0,o.kt)("li",{parentName:"ul"},"Access ID"),(0,o.kt)("li",{parentName:"ul"},"Access Key")),(0,o.kt)("admonition",{title:"Configure Sumo Logic API and Access",type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Your Sumo Logic URL will differ based on which region you are using. ",(0,o.kt)("a",{parentName:"li",href:"https://help.sumologic.com/docs/api/getting-started/#which-endpoint-should-i-should-use"},"Here's a guide which Sumo Logic API endpoint to use"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://help.sumologic.com/docs/manage/security/access-keys/#create-your-access-key"},"Create your ID and Key under Administration > Security > Access Keys in your Sumo Logic account"),"."),(0,o.kt)("li",{parentName:"ul"},"View the ",(0,o.kt)("a",{parentName:"li",href:"/configuration/connecting-to-data-stores/sumologic"},"Sumo Logic configuration docs")," for guidance."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="tracetest-provision.yaml"',title:'"tracetest-provision.yaml"'},'---\ntype: PollingProfile\nspec:\n  name: Default\n  strategy: periodic\n  default: true\n  periodic:\n    retryDelay: 5s\n    timeout: 10m\n\n---\ntype: DataStore\nspec:\n  name: Sumo Logic\n  type: sumologic\n  sumologic:\n    url: "https://api.sumologic.com/api/"\n    accessID: "your-access-id"\n    accessKey: "your-access-key"    \n')),(0,o.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run Both the Node.js App and Tracetest"),(0,o.kt)("p",null,"To start both the Node.js app and Tracetest, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml build\ndocker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up\n")),(0,o.kt)("p",null,"This will start your Tracetest Core instance on ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),"."),(0,o.kt)("p",null,"Open the URL and start creating tests! Make sure to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"http://app:8080/")," URL in your test creation, because your Node.js app and Tracetest Core are in the same network."))),(0,o.kt)("h2",{id:"learn-more"},"Learn More"),(0,o.kt)("p",null,"Feel free to check out our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,o.kt)("a",{parentName:"p",href:"https://dub.sh/tracetest-community"},"Slack Community")," for more info!"))}h.isMDXComponent=!0}}]);